{"version":3,"sources":["services/avatarAPI.js","services/tokenAPI.js","services/questionsAPI.js","redux/reducers/userReducer.js","redux/reducers/gameReducer.js","redux/reducers/rootReducer.js","redux/actions/actions.js","redux/store/store.js","components/Login.jsx","pages/Home.jsx","components/GameCard.jsx","pages/Game.jsx","pages/Feedback.jsx","pages/Ranking.jsx","pages/Settings.jsx","utils/serviceWorker.js","index.jsx","app/App.jsx"],"names":["email","a","async","hash","md5","toString","fetch","response","url","json","token","initialState","name","avatar","score","questions","isGameReady","combineReducers","user","state","action","type","payload","game","results","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Login","this","props","disabled","handleChange","handleSubmit","htmlFor","data-testid","id","placeholder","value","onChange","onClick","Component","Home","bind","switchToSettings","event","target","setState","history","setLogin","getToken","object","player","assertions","gravatarEmail","localStorage","setItem","JSON","stringify","push","connect","dispatch","fetchTokenAPI","GameCard","correctColor","wrongColor","scorePlayer","timer","nextAsk","changeAsk","onClickColorCorrect","onClickColorIncorrect","calcScore","setLocalStorage","cancelTime","showBtnNext","showNextAsk","buttonNext","setTimer","difficulty","stopWatch","setInterval","prevState","clearTimeout","getScore","total","console","log","src","alt","question","correct","className","correct_answer","incorrects","incorrect_answers","map","element","index","key","answers","sort","Math","random","options","answer","header","category","withRouter","playerScore","Game","getAvatar","getQuestions","fetchAvatarAPI","fetchAvatar","fetchQuestionsAPI","fetchQuestions","Feedback","handleClick","exist","parse","getItem","playerResult","picture","Ranking","ranking","b","Settings","Boolean","location","hostname","match","ReactDOM","render","basename","path","component","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0f256bc.chunk.js","sourcesContent":["import md5 from 'crypto-js/md5';\n\nexport default async (email) => {\n  const hash = md5(email).toString();\n  const response = await fetch(`https://www.gravatar.com/avatar/${hash}`);\n  return response.url;\n};\n","export default async () => {\n  const response = await fetch(\n    'https://opentdb.com/api_token.php?command=request',\n  );\n  return (await response).json();\n};\n","export default async (token) => {\n  const response = await fetch(\n    `https://opentdb.com/api.php?amount=5&token=${token}`,\n  );\n  return (await response).json();\n};\n","import { USER_LOGIN, USER_TOKEN, USER_AVATAR, GAME_SCORE } from '../actions/actions';\n\nconst initialState = {\n  name: '',\n  email: '',\n  avatar: '',\n  token: '',\n  score: 0,\n};\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n  case USER_LOGIN:\n    return {\n      ...state,\n      name: action.payload.name,\n      email: action.payload.email,\n    };\n  case USER_AVATAR:\n    return {\n      ...state,\n      avatar: action.payload,\n    };\n  case USER_TOKEN:\n    return ({\n      ...state,\n      token: action.payload.token,\n    });\n  case GAME_SCORE:\n    return ({\n      ...state,\n      score: action.payload,\n    });\n  default:\n    return state;\n  }\n}\n","import { GAME_QUESTIONS } from '../actions/actions';\n\nconst initialState = {\n  questions: [],\n  isGameReady: true,\n};\n\nexport default function gameReducer(state = initialState, action) {\n  switch (action.type) {\n  case GAME_QUESTIONS:\n    return {\n      ...state,\n      questions: action.payload.results,\n      isGameReady: false,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './userReducer';\nimport game from './gameReducer';\n\nexport default combineReducers({\n  user,\n  game,\n});\n","import fetchAvatarAPI from '../../services/avatarAPI';\nimport fetchTokenAPI from '../../services/tokenAPI';\nimport fetchQuestionsAPI from '../../services/questionsAPI';\n\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const USER_AVATAR = 'USER_AVATAR';\nexport const USER_TOKEN = 'USER_TOKEN';\nexport const GAME_QUESTIONS = 'GAME_QUESTIONS';\nexport const GAME_SCORE = 'GAME_SCORE';\n\nexport const login = (value) => ({\n  type: USER_LOGIN,\n  payload: value,\n});\n\nexport const userAvatar = (value) => ({\n  type: USER_AVATAR,\n  payload: value,\n});\n\nexport const userToken = (value) => ({\n  type: USER_TOKEN,\n  payload: value,\n});\n\nexport const gameQuestions = (value) => ({\n  type: GAME_QUESTIONS,\n  payload: value,\n});\n\nexport const score = (value) => ({\n  type: GAME_SCORE,\n  payload: value,\n});\n\nexport const fetchAvatar = (email) => async (dispatch) => {\n  const response = await fetchAvatarAPI(email);\n  dispatch(userAvatar(response));\n};\n\nexport const fetchToken = () => async (dispatch) => {\n  const response = await fetchTokenAPI();\n  dispatch(userToken(response));\n};\n\nexport const fetchQuestions = (token) => async (dispatch) => {\n  const response = await fetchQuestionsAPI(token);\n  dispatch(gameQuestions(response));\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Login extends Component {\n  render() {\n    const {\n      state: { name, email },\n      disabled,\n      handleChange,\n      handleSubmit,\n    } = this.props;\n\n    return (\n      <form>\n        <label htmlFor=\"name\">\n          Nome:\n          <input\n            data-testid=\"input-player-name\"\n            type=\"text\"\n            id=\"name\"\n            placeholder=\"Digite o seu nome\"\n            value={ name }\n            onChange={ handleChange }\n          />\n        </label>\n        <label htmlFor=\"email\">\n          Email:\n          <input\n            data-testid=\"input-gravatar-email\"\n            type=\"email\"\n            id=\"email\"\n            placeholder=\"email@email.com\"\n            value={ email }\n            onChange={ handleChange }\n          />\n        </label>\n        <button\n          data-testid=\"btn-play\"\n          disabled={ disabled }\n          type=\"button\"\n          onClick={ handleSubmit }\n        >\n          Jogar\n        </button>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  state: PropTypes.shape({ name: PropTypes.string, email: PropTypes.string }).isRequired,\n  disabled: PropTypes.bool.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login, fetchToken } from '../redux/actions/actions';\nimport Login from '../components/Login';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.switchToSettings = this.switchToSettings.bind(this);\n  }\n\n  handleChange(event) {\n    const { id, value } = event.target;\n    this.setState({ [id]: value });\n  }\n\n  handleSubmit() {\n    const { history, setLogin, getToken } = this.props;\n    const { name, email } = this.state;\n    setLogin({ name, email });\n    const object = {\n      player:\n      { name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email },\n    };\n    localStorage.setItem('state', JSON.stringify(object));\n    getToken();\n    history.push('/game');\n  }\n\n  switchToSettings() {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { name, email } = this.state;\n    const disabled = !(name && email);\n\n    return (\n      <main>\n        <Login\n          state={ this.state }\n          disabled={ disabled }\n          handleChange={ this.handleChange }\n          handleSubmit={ this.handleSubmit }\n        />\n        <button\n          data-testid=\"btn-settings\"\n          type=\"button\"\n          onClick={ this.switchToSettings }\n        >\n          Configurações\n        </button>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: () => dispatch(fetchToken()),\n  setLogin: (state) => dispatch(login(state)),\n});\n\nHome.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n  setLogin: PropTypes.func.isRequired,\n  getToken: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport '../css/game.css';\nimport { connect } from 'react-redux';\nimport { score } from '../redux/actions/actions';\n\nclass GameCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      correctColor: '',\n      wrongColor: '',\n      assertions: 0,\n      scorePlayer: 0,\n      timer: 30,\n      nextAsk: false,\n      changeAsk: 0,\n    };\n    this.onClickColorCorrect = this.onClickColorCorrect.bind(this);\n    this.onClickColorIncorrect = this.onClickColorIncorrect.bind(this);\n    this.calcScore = this.calcScore.bind(this);\n    this.setLocalStorage = this.setLocalStorage.bind(this);\n    this.cancelTime = this.cancelTime.bind(this);\n    this.showBtnNext = this.showBtnNext.bind(this);\n    this.showNextAsk = this.showNextAsk.bind(this);\n    this.buttonNext = this.buttonNext.bind(this);\n  }\n\n  componentDidMount() {\n    this.setTimer();\n  }\n\n  async onClickColorCorrect(difficulty) {\n    const { timer } = this.state;\n    this.setState({\n      correctColor: 'correctColor',\n      wrongColor: 'wrongColor',\n    });\n    await this.calcScore(difficulty, timer);\n    this.setLocalStorage();\n    this.showBtnNext();\n  }\n\n  onClickColorIncorrect() {\n    this.setState({\n      correctColor: 'correctColor',\n      wrongColor: 'wrongColor',\n    });\n    this.showBtnNext();\n  }\n\n  setTimer() {\n    const second = 1000;\n    const stopWatch = setInterval(() => {\n      this.setState((prevState) => ({ timer: prevState.timer - 1 }));\n      this.cancelTime(stopWatch);\n    }, second);\n  }\n\n  setLocalStorage() {\n    const { assertions, scorePlayer } = this.state;\n    const { email, name } = this.props;\n\n    const object = {\n      player: { name, assertions, score: scorePlayer, gravatarEmail: email },\n    };\n\n    localStorage.setItem('state', JSON.stringify(object));\n  }\n\n  cancelTime(stopWatch) {\n    const { timer } = this.state;\n    if (timer === 0) {\n      clearTimeout(stopWatch);\n      this.onClickColorCorrect();\n    }\n  }\n\n  calcScore(difficulty, timer) {\n    const { scorePlayer } = this.state;\n    const { getScore } = this.props;\n    const dez = 10;\n    let total = 0;\n    const HARD = 3;\n    const MEDIUM = 2;\n    const EASY = 1;\n    console.log(timer);\n    if (difficulty === 'hard') total = dez + timer * HARD;\n    if (difficulty === 'medium') total = dez + timer * MEDIUM;\n    if (difficulty === 'easy') total = dez + timer * EASY;\n    this.setState((prevState) => ({\n      scorePlayer: scorePlayer + total,\n      assertions: prevState.assertions + 1,\n    }));\n    getScore(scorePlayer);\n  }\n\n  showBtnNext() {\n    this.setState({\n      nextAsk: true,\n    });\n  }\n\n  showNextAsk() {\n    const FOUR = 4;\n    const { history } = this.props;\n    const { changeAsk } = this.state;\n    if (changeAsk === FOUR) {\n      return history.push('/feedback');\n    }\n    this.setState((state) => ({\n      changeAsk: state.changeAsk + 1,\n      nextAsk: false,\n    }));\n  }\n\n  header(avatar, name, scorePlayer) {\n    return (\n      <header>\n        <img data-testid=\"header-profile-picture\" src={ avatar } alt=\"\" />\n        <span data-testid=\"header-player-name\">{name}</span>\n        <span data-testid=\"header-score\">{`Pontos: ${scorePlayer}`}</span>\n      </header>\n    );\n  }\n\n  buttonNext() {\n    return (\n      <button type=\"button\" data-testid=\"btn-next\" onClick={ this.showNextAsk }>\n        Próxima\n      </button>\n    );\n  }\n\n  render() {\n    const { correctColor, wrongColor, timer, scorePlayer,\n      nextAsk, changeAsk } = this.state;\n    const { question, name, avatar } = this.props;\n    const RANDOM = 5;\n    const correct = (\n      <button\n        onClick={ () => this.onClickColorCorrect(question[changeAsk].difficulty) }\n        disabled={ timer === 0 }\n        data-testid=\"correct-answer\"\n        type=\"button\"\n        id=\"correct\"\n        className={ correctColor }\n      >\n        {question[changeAsk].correct_answer}\n      </button>\n    );\n    const incorrects = question[changeAsk].incorrect_answers.map(\n      (element, index) => (\n        <button\n          onClick={ this.onClickColorIncorrect }\n          data-testid={ `wrong-answer-${index}` }\n          disabled={ timer === 0 }\n          type=\"button\"\n          id=\"answer\"\n          key={ element }\n          className={ wrongColor }\n        >\n          {element}\n        </button>\n      ),\n    );\n    const answers = [correct, ...incorrects].sort(() => Math.random() - RANDOM);\n    console.log(answers);\n    const options = answers.map((answer) => <li key={ answer }>{answer}</li>);\n    return (\n      <div>\n        {this.header(avatar, name, scorePlayer)}\n        <div>\n          <p data-testid=\"question-category\">{question[changeAsk].category}</p>\n          <h1 data-testid=\"question-text\">{question[changeAsk].question}</h1>\n          <ul>{options}</ul>\n          <div>{`Tempo Restante: ${timer}`}</div>\n        </div>\n        {nextAsk && this.buttonNext()}\n      </div>\n    );\n  }\n}\n\nGameCard.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  getScore: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  question: PropTypes.objectOf(PropTypes.any).isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    name: state.user.name,\n    email: state.user.email,\n    avatar: state.user.avatar,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getScore: (playerScore) => dispatch(score(playerScore)),\n  };\n}\n\nexport default withRouter(\n  connect(mapStateToProps, mapDispatchToProps)(GameCard),\n);\n","// Referência para implementação da Contagem Regressiva: Zhiyue Yi\n// src: https://dev.to/zhiyueyi/how-to-create-a-simple-react-countdown-timer-4mc3\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchAvatar, fetchQuestions } from '../redux/actions/actions';\nimport GameCard from '../components/GameCard';\n\nclass Game extends Component {\n  componentDidMount() {\n    const { email, token, getAvatar, getQuestions } = this.props;\n    getAvatar(email);\n    getQuestions(token);\n    localStorage.setItem('token', JSON.stringify(token));\n  }\n\n  render() {\n    const { questions, isGameReady } = this.props;\n    return (\n      <main>{!isGameReady && <GameCard question={ questions } />}</main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  email: state.user.email,\n  token: state.user.token,\n  questions: state.game.questions,\n  isGameReady: state.game.isGameReady,\n  playerScore: state.user.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getAvatar: (email) => dispatch(fetchAvatar(email)),\n  getQuestions: (token) => dispatch(fetchQuestions(token)),\n});\n\nGame.propTypes = {\n  email: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.any).isRequired,\n  isGameReady: PropTypes.bool.isRequired,\n  getAvatar: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(name, score, avatar) {\n    const { history } = this.props;\n    const exist = JSON.parse(localStorage.getItem('ranking')) || [];\n    const playerResult = {\n      name,\n      score,\n      picture: avatar,\n    };\n    exist.push(playerResult);\n    localStorage.setItem('ranking', JSON.stringify(exist));\n    history.push('/ranking');\n  }\n\n  render() {\n    const three = 3;\n    const { avatar, name, history } = this.props;\n    const { assertions, score } = JSON.parse(\n      localStorage.getItem('state'),\n    ).player;\n    return (\n      <div>\n        <header>\n          <img data-testid=\"header-profile-picture\" src={ avatar } alt=\"\" />\n          <span data-testid=\"header-player-name\">{name}</span>\n          Pontos:\n          <span data-testid=\"header-score\">{score}</span>\n        </header>\n        <div data-testid=\"feedback-text\">\n          {assertions >= three ? 'Mandou bem!' : 'Podia ser melhor...'}\n        </div>\n        Placar final:\n        <div data-testid=\"feedback-total-score\">{score}</div>\n        Total de acertos:\n        <div data-testid=\"feedback-total-question\">{assertions}</div>\n        <button\n          data-testid=\"btn-play-again\"\n          type=\"button\"\n          onClick={ () => {\n            history.push('/');\n          } }\n        >\n          Jogar novamente\n        </button>\n        <button\n          data-testid=\"btn-ranking\"\n          type=\"button\"\n          onClick={ () => this.handleClick(name, score, avatar) }\n        >\n          Ver Ranking\n        </button>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  email: state.user.email,\n  avatar: state.user.avatar,\n  isGameReady: state.game.isGameReady,\n});\nFeedback.propTypes = {\n  name: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  history: PropTypes.objectOf(PropTypes.any).isRequired,\n};\nexport default connect(mapStateToProps)(Feedback);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nclass Ranking extends Component {\n  render() {\n    const number = -1;\n    const { history } = this.props;\n    const ranking = JSON.parse(localStorage.getItem('ranking'))\n      .sort((a, b) => (a.score > b.score ? number : 1));\n    return (\n      <div>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <ul>\n          { ranking.map((element, index) => (\n            <li key={ index }>\n              <img src={ element.picture } alt=\"\" />\n              <div data-testid={ `player-name-${index}` }>{ element.name }</div>\n              <div>{`Score ${element.score}`}</div>\n            </li>\n          ))}\n        </ul>\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/') }\n        >\n          Home\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default Ranking;\n","import React, { Component } from 'react';\n\nexport default class Settings extends Component {\n  render() {\n    return (\n      <main>\n        <h1 data-testid=\"settings-title\">Settings Page</h1>\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store/store';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(\n  <Router basename=\"/trybe-project-trivia-react-redux\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from '../pages/Home';\nimport Game from '../pages/Game';\nimport Feedback from '../pages/Feedback';\nimport Ranking from '../pages/Ranking';\nimport Settings from '../pages/Settings';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/ranking\" component={ Ranking } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/game\" component={ Game } />\n        <Route exact path=\"/\" component={ Home } />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}